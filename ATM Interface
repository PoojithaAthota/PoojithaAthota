import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

class Transaction {
    private Date date;
    private String type;
    private double amount;

    public Transaction(String type, double amount) {
        this.date = new Date();
        this.type = type;
        this.amount = amount;
    }

    @Override
    public String toString() {
        return "Transaction{" +
                "date=" + date +
                ", type='" + type + '\'' +
                ", amount=" + amount +
                '}';
    }
}

class Account {
    private String accountNumber; // Added account number for identification
    private double balance;
    private List<Transaction> transactions;

    public Account(String accountNumber) {
        this.accountNumber = accountNumber;
        balance = 0.0;
        transactions = new ArrayList<>();
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
        transactions.add(new Transaction("Deposit", amount));
    }

    public boolean withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            transactions.add(new Transaction("Withdrawal", amount));
            return true;
        }
        return false;
    }

    public boolean transfer(Account recipient, double amount) {
        if (withdraw(amount)) {
            recipient.deposit(amount);
            transactions.add(new Transaction("Transfer to " + recipient.getAccountNumber(), amount));
            return true;
        }
        return false;
    }

    public List<Transaction> getTransactions() {
        return transactions;
    }

    public String getAccountNumber() {
        return accountNumber;
    }
}

class ATMInterface {
    private Scanner scanner;
    private Account account;
    private int pin;
    private int maxAttempts;
    private int remainingAttempts;

    public ATMInterface(Account account) {
        scanner = new Scanner(System.in);
        this.account = account;
        this.pin = 1234; // Example PIN, you can set your own
        this.maxAttempts = 3;
        this.remainingAttempts = maxAttempts;
    }

    public void displayMenu() {
        System.out.println("\nWelcome to the ATM!");
        System.out.println("1. Check Balance");
        System.out.println("2. Deposit");
        System.out.println("3. Withdraw");
        System.out.println("4. Transfer");
        System.out.println("5. View Transaction History");
        System.out.println("6. Exit");
        System.out.print("Enter your choice: ");
    }

    public boolean login() {
        while (remainingAttempts > 0) {
            System.out.print("Enter PIN: ");
            int inputPIN = scanner.nextInt();
            if (inputPIN == pin) {
                remainingAttempts = maxAttempts;
                return true;
            } else {
                remainingAttempts--;
                System.out.println("Incorrect PIN. " + remainingAttempts + " attempts remaining.");
            }
        }
        return false;
    }

    public void checkBalance() {
        System.out.println("Your balance is: $" + account.getBalance());
    }

    public void deposit() {
        System.out.print("Enter amount to deposit: $");
        double amount = scanner.nextDouble();
        account.deposit(amount);
        System.out.println("Deposit successful.");
    }

    public void withdraw() {
        System.out.print("Enter amount to withdraw: $");
        double amount = scanner.nextDouble();
        if (account.withdraw(amount)) {
            System.out.println("Withdrawal successful.");
        } else {
            System.out.println("Insufficient funds.");
        }
    }

    public void transfer() {
        System.out.print("Enter recipient's account number: ");
        String recipientAccountNumber = scanner.next();
        System.out.print("Enter amount to transfer: $");
        double amount = scanner.nextDouble();

        // Simulate recipient account (for demonstration, in real world, you'd fetch recipient account from database)
        Account recipient = new Account(recipientAccountNumber);

        if (account.transfer(recipient, amount)) {
            System.out.println("Transfer successful.");
        } else {
            System.out.println("Transfer failed. Insufficient funds.");
        }
    }

    public void viewTransactionHistory() {
        System.out.println("\nTransaction History:");
        List<Transaction> transactions = account.getTransactions();
        if (transactions.isEmpty()) {
            System.out.println("No transactions yet.");
        } else {
            for (Transaction transaction : transactions) {
                System.out.println(transaction);
            }
        }
    }

    public void run() {
        boolean loggedIn = false;
        while (!loggedIn) {
            loggedIn = login();
            if (!loggedIn) {
                System.out.println("Account locked. Please contact customer support.");
                return;
            }
        }

        int choice;

        do {
            displayMenu();
            choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    checkBalance();
                    break;
                case 2:
                    deposit();
                    break;
                case 3:
                    withdraw();
                    break;
                case 4:
                    transfer();
                    break;
                case 5:
                    viewTransactionHistory();
                    break;
                case 6:
                    System.out.println("Thank you for using the ATM!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        } while (choice != 6);
    }
}

public class Main {
    public static void main(String[] args) {
        Account account = new Account("1234567890"); // Example account number
        ATMInterface atmInterface = new ATMInterface(account);
        atmInterface.run();
    }
}
